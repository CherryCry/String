/*树的存储结构--双亲表示法*/
/*用线性结构数组构成*/
#include<iostream>
typedef struct Node{  //表示结点
    int data;    //结点的数据域
    int parent;  //双亲的位置
    //int first_chlid;
    //int second_child;
    //int .......
};
class Tree{
public:
    Tree();
    Tree(const char a[], const int m);
    ~Tree();
private:
    static const int Maxsize = 100;
    Node nodes[Maxsize];
    int r=0;  //  根的位置
    int n=0;   // 总结点数
};
Tree::~Tree()
{

}
Tree::Tree(const char a[], const int m)
{
    for (int i = 0; i < m; ++i)
    {
        nodes[i].data = a[i];
        //根据具体树进行赋值nodes[i].parent=
        
    }
    r = -1;  //规定根的位置是-1；
    n = m;  
}
----------------------------------------------------------------------
/*数据结构---孩子表示法*/
/*充分利用线性表和链表*/
#include<iostream>
struct Child_Node{    //孩子结点
    int child;  //孩子结点的数据域；
    struct Child_Node*next;   //双亲可以对应多个节点（孩子）
}; 
typedef struct First_Node{  //表头结点
    int data;     //表头结点的数据域
    struct Child_Node*first;   //表头结点的指针域指向孩子结点
};
class Tree{
public:
    Tree();
    Tree(const int a[], const int m);
    ~Tree();
private:
    static const int Maxsize = 100;
    First_Node nodes[Maxsize]; //结构体数组
    int n;   //结点总数
    int r;   //根节点的位置
};
